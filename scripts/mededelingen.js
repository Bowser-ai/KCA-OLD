(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var firebaseConfig = {
  apiKey: "AIzaSyDF2m4vvAS0zQXfn2NQgQxrDZGRblq0wY8",
  authDomain: "tielbeke3.firebaseapp.com",
  databaseURL: "https://tielbeke3.firebaseio.com",
  projectId: "tielbeke3",
  storageBucket: "tielbeke3.appspot.com",
  messagingSenderId: "1010883935820",
  appId: "1:1010883935820:web:3320f49198950cf0"
};
firebase.initializeApp(firebaseConfig);
var database = firebase.database().ref();

function retrieve_list() {
  return database.orderByChild("filiaalnummer").once("value").then(function (snapshot) {
    var filialen_list = {};
    snapshot.forEach(function (elem) {
      filialen_list[elem.val()["filiaalnummer"]] = elem.val();
    });
    return filialen_list;
  });
}

module.exports = {
  retrieve_list: retrieve_list
};

},{}],2:[function(require,module,exports){
"use strict";

var database = require('./database');

var $ = jQuery;
var $mededelingen_list = $('.mededelingen-list'); //if there is already a cache in the browser

if (localStorage['mededelingen']) {
  //grab storage from cache
  var mededelingen_storage = JSON.parse(localStorage.getItem("mededelingen")); //build the UI with the items from cache

  attach_list_to_ui(mededelingen_storage); //in the background fetch a new list from the db to check is updates
  //are need

  database.retrieve_list().then(function (snapshot) {
    var diff_array = [];
    var filtered_array = {}; //filter only the filialen with mededelingen, and put them in
    //filtered_array

    for (var key in snapshot) {
      if (snapshot[key]['mededeling'] && snapshot[key]['mededeling'] !== "") {
        filtered_array[key] = snapshot[key];
        filtered_array[key]['mededeling'] = snapshot[key]['mededeling'];
      }
    } //check if there are items deleted from the db and update the list,
    //the double loop checks for keys in the snapshot not in the cache


    var isFound = false;

    for (var _key in mededelingen_storage) {
      isFound = false;

      for (var sub_key in filtered_array) {
        if (sub_key === _key) {
          isFound = true;
          break;
        }
      }

      if (!isFound) diff_array.push(_key);
    } // delete local cache and prepare a fresh cache with a new snapshot


    localStorage.clear();
    localStorage.setItem("mededelingen", JSON.stringify(filtered_array)); //update the ui with the updates

    attach_list_to_ui(filtered_array);
    delete_ui_elements(diff_array);
  });
} //if there is no cache, retrieve a snapshot from the db and update
else {
    database.retrieve_list().then(function (snapshot) {
      var mededelingen = {};

      for (var key in snapshot) {
        if (snapshot[key]['mededeling'] && snapshot[key]['mededeling'] != "") {
          mededelingen[key] = snapshot[key];
          mededelingen[key]['mededeling'] = snapshot[key]['mededeling'];
        }
      }

      attach_list_to_ui(mededelingen);
      localStorage.setItem("mededelingen", JSON.stringify(mededelingen));
    });
  }

function attach_list_to_ui(list) {
  for (var key in list) {
    if (list[key]['mededeling'] && $mededelingen_list.find("#".concat(key)).length < 1) {
      $mededelingen_list.append($('<li>', {
        id: key
      }).append("Filiaalnummer: ".concat(list[key]["filiaalnummer"], "<br>\n                            Adres: ").concat(list[key]["address"], "<br>\n                            <b>Mededeling: </b>").concat(list[key]['mededeling'], "<br>")));
    }
  }
}

function delete_ui_elements(keys) {
  keys.forEach(function (filiaalnummer) {
    $mededelingen_list.find("#".concat(filiaalnummer)).remove();
  });
}

},{"./database":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
